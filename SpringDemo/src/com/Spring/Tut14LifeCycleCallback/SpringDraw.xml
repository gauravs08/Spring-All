<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN 2.0//EN" "http://www.springframework.org/dtd/spring-beans-2.0.dtd">

<beans default-init-method="myInit" default-destroy-method="myDestroy">
<!-- Intro: init-method="myInit" destroy-method="myDestroy"
			this can be at child level["triangle"] or parent level ["parenttriangle"] ,
			but if placed in parent level it will handles all childs initi/destroy cleanup processes 
			one more way : place in <beans > at top of all beans but need to place default as prefix as it is default methods -->
			
	<bean id="parenttriangle" class ="com.Spring.Tut14LifeCycleCallback.Triangle"  >
		<property name ="pointA" ref="zeropoint"/>
	</bean>
	
	<bean id="triangle" class="com.Spring.Tut14LifeCycleCallback.Triangle" name="triangle-name" parent="parenttriangle" >
		<property name="pointB" ref="point2"/>
		<property name="pointC">
			<bean  class="com.Spring.Tut14LifeCycleCallback.Point">
				<property name="x" value ="-20"/>
				<property name="y" value ="0"/>
			</bean>
		</property>
	</bean>
	<bean id="triangle1" class="com.Spring.Tut14LifeCycleCallback.Triangle"  parent="parenttriangle" >
		<property name="pointB" ref="point3"/>
	</bean>
	<!-- Info :: 
				
	  Inheriting collection - since in class Trianglelist we have points as list collection 
	  	we can initialise collection bean using following technique 
	  	
	  	Note:: the only difference here is if we dont right merge="true" in subclass bean,
	  	 then it will override the base class property name="points"   try removing merge="true" and chk the diff in o/p -->
	
	<!-- Using list for creating point  -->
	<bean id="parenttrianglelist" class ="com.Spring.Tut14LifeCycleCallback.TriangleList" >
		<property name="points" >
			<list> <ref bean="zeropoint" /></list>
		</property>
	</bean>
	<bean id="trianglelist" class="com.Spring.Tut14LifeCycleCallback.TriangleList"  parent="parenttrianglelist" >
		<property name="points" >
			<list merge="true"> <ref bean ="point2"/> 
				   <ref bean ="point3"/>
			 </list>
		</property>
	</bean>	
		<!--INFO::
		Bean Inheritence : bean "triangle" is inheriting "parenttriangle" by using parent="parenttriangle" in bean initialization
							here pointA is inherited by triangle beans with PointB,pointB already in child class.
		
		
		Spring Bean Scope:
			<bean id="triangle" class="com.Triangle" scope="singleton">
			 when application Context initialized only once bean obj are created ,
			if .getbean("triangle") is called 5 times they are supplied with the same bean ,
			bean are not created everytime they are called.  
			
			(I)Basic Bean Scope::
			 a)Singleton - Only once per Spring Container (by default) / web container , a JVM can have diff web container with same xml beans
			 b)Prototype - New Bean Created with request or reference
			 
			(II)Web-aware context Bean Scope:
			 request - New Bean /servlet Request
			 session - New Bean / session
			 Glo bal Session - New Bean /global HTTP Session(portlet context)
			 
		ref:  ask spring to find the reference id in xml and that obj is assigned with the reference properties
				eg. above pointA is assigned x=0,y=0 as value
				we can have multi levelled reference means in ref we can have another reference like inheritance
		alias: 2 ways to give aliasing 
				1) itself in bean tag name="other name"
				2) separate tag <alias name="triangle" alias="triangle-alias"/>
		
		idref: Since aliasing can happen anywhere so to ristrict ref tag to use only id to find reference 
				we use 
				<property name="pointA" > 
					<idref ="zeropoint"/>
				</property>
		Inner Bean: when we are sure enough that we are not using particular bean outside
					 and are only used in one place. then it is prefered to use inner bean .
					this is anti-referencing
					as there is no ref/idref and no id required for inner bean
		<property name="pointC">
			<bean  class="com.Spring.Tut14LifeCycleCallback.Point">
				<property name="x" value ="-20"/>
				<property name="y" value ="0"/>
			</bean>
		</property>
					 
		   -->
	
	<alias name="triangle" alias="triangle-alias"/>
	
	<bean id="zeropoint" class="com.Spring.Tut14LifeCycleCallback.Point">
		<property name="x" value ="0"/>
		<property name="y" value ="0"/>
	</bean>
	<bean id="point2" class="com.Spring.Tut14LifeCycleCallback.Point">
		<property name="x" value ="-20"/>
		<property name="y" value ="0"/>
	</bean>
	<bean id="point3" class="com.Spring.Tut14LifeCycleCallback.Point">
		<property name="x" value ="0"/>
		<property name="y" value ="20"/>
	</bean>
</beans>

